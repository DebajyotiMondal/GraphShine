<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphShine</name>
    </assembly>
    <members>
        <member name="T:GraphShine.DataStructures.BST`1">
            <summary>
            Maintains a set of unique values
            </summary>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.CreateNode">
            <summary>
            Create a node and assign a unique id for the node; returns the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.DeleteNode(GraphShine.GraphPrimitives.Node)">
            <summary>
            Delete the given node.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.DeleteNode(System.Int32)">
            <summary>
            Delete the node of given node Id.
            </summary>
            <param name="vId"></param>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.DeleteDirectedEdge(GraphShine.GraphPrimitives.Node,GraphShine.GraphPrimitives.Node)">
            <summary>
            Delete the given edge.
            </summary>
            <param name="parent"></param>
            <param name="kid"></param>
            <returns></returns>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.InsertDirectedEdge(GraphShine.GraphPrimitives.Node,GraphShine.GraphPrimitives.Node,System.Int32)">
            <summary>
            Create a new edge.
            </summary>
            <param name="parent"></param>
            <param name="Kid"></param>
            <param name="kidPosition"></param>
            <returns></returns>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Tree.InsertDirectedEdge(GraphShine.GraphPrimitives.Edge,System.Int32)">
            <summary>
            Insert the given edge.
            </summary>
            <param name="e"></param>
            <param name="kidPosition"></param>
            <returns></returns>
        </member>
        <member name="M:GraphShine.GraphPrimitives.Node.getKid(System.Int32)">
            <summary>
            return the kid in the k-th position
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="T:GraphShine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GraphShine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GraphShine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:GraphShine.Utilities.ArraySearch.BinarySearch(System.Double,System.Double[],System.Int32@)">
            <summary>
            Searches query value inside an array and if found, then the indexFound is 
            the index in the Array that holds the query value. Returns true if found, false otherwise.
            </summary>
            <param name="querypoint"></param>
            <param name="Array"></param>
            <param name="indexFound"></param>
            <returns></returns>
        </member>
        <member name="M:GraphShine.Utilities.ArraySearch.BinarySearchClosest(System.Double,System.Double[],System.Int32@,System.Int32@)">
            <summary>
            Searches query value inside an array and if found, then the leftIndex and rightIndex both contain 
            the Array Index that holds the query value. If not found then the leftIndex and rightIndex forms
            the smallest interval containing the query value. Returns true if found, false otherwise.
            If the query value is smaller (larger) than all then leftIndex (rightIndex) is -1.
            </summary>
            <param name="querypoint"></param>
            <param name="Array"></param>
            <param name="leftIndex"></param>
            <param name="rightIndex"></param>
            <returns></returns>
        </member>
        <member name="T:GraphShine.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:GraphShine.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:GraphShine.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:GraphShine.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:GraphShine.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
